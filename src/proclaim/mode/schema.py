# generated by datamodel-codegen:
#   filename:  ro-crate-editor-profile-schema.json
#   timestamp: 2024-11-29T06:39:35+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union, Annotated

from pydantic import BaseModel, Field, StringConstraints


class Metadata(BaseModel):
    class Config:
        extra = "allow"

    name: str
    description: str
    version: float


class ResolveItem(BaseModel):
    types: Optional[List] = None
    properties: Optional[List] = None


class Type(Enum):
    Select = 'Select'
    MultiSelect = 'MultiSelect'
    Value = 'Value'


class Input(BaseModel):
    class Config:
        extra = "allow"

    id: Annotated[str, StringConstraints(pattern=r'^(https?|http?)://')]
    name: str
    label: Optional[str] = None
    multiple: Optional[bool] = None
    required: Optional[bool] = None
    hide: Optional[bool] = None
    readonly: Optional[bool] = None
    group: Optional[str] = None
    type: Optional[Union[List[str], Type]] = None


class Classes(BaseModel):
    class Config:
        extra = "forbid"

    id: Optional[Annotated[str, StringConstraints(pattern=r'^(https?|http?)://')]] = None
    hasSubclass: Optional[List[str]] = None
    subClassOf: Optional[List[str]] = None
    inputs: List[Input]


class Lookup(BaseModel):
    class Config:
        extra = "forbid"

    fields: Optional[List] = None
    module: Optional[str] = None
    datapacks: Optional[List[str]] = None


class ModeFile(BaseModel):
    class Config:
        extra = "allow"

    metadata: Metadata = Field(..., description='Profile Metadata')
    context: Optional[Union[List, str, Dict[str, Any]]] = None
    inputGroups: Optional[List[Dict[str, Any]]] = Field(
        None, description='Definitons for the top-level groups of inputs (properties)'
    )
    resolve: Optional[List[ResolveItem]] = Field(
        None, description='Configuration to resolve property associations'
    )
    classes: Dict[Annotated[str, StringConstraints(pattern=r'^[A-Z,a-z]*')], Classes] = Field(
        ..., description='Class definitions'
    )
    lookup: Optional[Dict[Annotated[str, StringConstraints(pattern=r'^[A-Z,a-z]*')], Lookup]] = Field(
        None, description='Lookup definitions'
    )
